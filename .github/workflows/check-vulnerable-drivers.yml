name: "HVCI Tag Update"

on:
  schedule:
    # Runs twice a week: Monday and Thursday at 02:00 UTC
    - cron: '0 2 * * 1,4'
  workflow_dispatch: # Allow manual trigger
  workflow_run:
    workflows: ["Update LOLDrivers Data"]  # Name of the data update workflow
    types:
      - completed

permissions:
  contents: write
  actions: read

jobs:
  run_powershell:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Run PowerShell script
      run: |
        Invoke-WebRequest -Uri "https://gist.githubusercontent.com/MHaggis/8d6de45b883b338e47de08b3cb4c9819/raw/0051a329166b4b6bee29345f455640c902fdb735/HVC_LOLDrivers_check_csv.ps1" -OutFile "script.ps1"
        ./script.ps1
        
    - name: Upload CSV
      uses: actions/upload-artifact@v4
      with:
        name: hvci_drivers
        path: hvci_drivers.csv

  run_node:
    needs: run_powershell
    runs-on: ubuntu-latest
    # Only run if previous workflow succeeded, or if triggered manually/by cron
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Download CSV
      uses: actions/download-artifact@v4
      with:
        name: hvci_drivers
        path: ./
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create HVCI tagging script
      run: |
        cat > hvci-tagger.js << 'EOF'
        #!/usr/bin/env node
        
        import fs from 'fs';
        import { createReadStream } from 'fs';
        import { createInterface } from 'readline';
        
        const DRV_JSON_PATH = './data/drv.json';
        const CSV_PATH = './hvci_drivers.csv';
        
        async function processCSV() {
            console.log('Reading HVCI CSV results...');
            
            const blockedHashes = new Set();
            const allowedHashes = new Set();
            
            const fileStream = createReadStream(CSV_PATH);
            const rl = createInterface({
                input: fileStream,
                crlfDelay: Infinity
            });
            
            let lineNumber = 0;
            for await (const line of rl) {
                lineNumber++;
                if (lineNumber === 1) continue; // Skip header
                
                const columns = line.split(',');
                if (columns.length >= 4) {
                    const md5 = columns[0]?.replace(/"/g, '').trim();
                    const sha1 = columns[1]?.replace(/"/g, '').trim();
                    const sha256 = columns[2]?.replace(/"/g, '').trim();
                    const status = columns[3]?.replace(/"/g, '').trim();
                    
                    if (status === 'Blocked') {
                        if (md5) blockedHashes.add(md5.toLowerCase());
                        if (sha1) blockedHashes.add(sha1.toLowerCase());
                        if (sha256) blockedHashes.add(sha256.toLowerCase());
                    } else if (status === 'Allowed') {
                        if (md5) allowedHashes.add(md5.toLowerCase());
                        if (sha1) allowedHashes.add(sha1.toLowerCase());
                        if (sha256) allowedHashes.add(sha256.toLowerCase());
                    }
                }
            }
            
            console.log(`Found ${blockedHashes.size} blocked hashes and ${allowedHashes.size} allowed hashes`);
            return { blockedHashes, allowedHashes };
        }
        
        async function updateDriversJSON() {
            console.log('Loading drivers database...');
            const driversData = JSON.parse(fs.readFileSync(DRV_JSON_PATH, 'utf8'));
            
            const { blockedHashes, allowedHashes } = await processCSV();
            
            let updatedCount = 0;
            let hvciBlockedCount = 0;
            let hvciAllowedCount = 0;
            
            driversData.forEach(driver => {
                if (driver.KnownVulnerableSamples) {
                    driver.KnownVulnerableSamples.forEach(sample => {
                        const sampleHashes = [
                            sample.MD5?.toLowerCase(),
                            sample.SHA1?.toLowerCase(), 
                            sample.SHA256?.toLowerCase(),
                            sample.Authentihash?.MD5?.toLowerCase(),
                            sample.Authentihash?.SHA1?.toLowerCase(),
                            sample.Authentihash?.SHA256?.toLowerCase()
                        ].filter(Boolean);
                        
                        let isBlocked = false;
                        let isAllowed = false;
                        
                        for (const hash of sampleHashes) {
                            if (blockedHashes.has(hash)) {
                                isBlocked = true;
                                break;
                            }
                            if (allowedHashes.has(hash)) {
                                isAllowed = true;
                            }
                        }
                        
                        if (!driver.Tags) {
                            driver.Tags = [];
                        }
                        
                        const hasHVCIBlocked = driver.Tags.includes('HVCI Blocked');
                        const hasHVCICompatible = driver.Tags.includes('HVCI Compatible');
                        
                        if (isBlocked && !hasHVCIBlocked) {
                            driver.Tags.push('HVCI Blocked');
                            updatedCount++;
                            hvciBlockedCount++;
                            
                            // Remove HVCI Compatible if present
                            const compatibleIndex = driver.Tags.indexOf('HVCI Compatible');
                            if (compatibleIndex > -1) {
                                driver.Tags.splice(compatibleIndex, 1);
                            }
                        } else if (isAllowed && !hasHVCICompatible && !hasHVCIBlocked) {
                            driver.Tags.push('HVCI Compatible');
                            updatedCount++;
                            hvciAllowedCount++;
                        }
                    });
                }
            });
            
            // Add metadata
            if (!driversData._metadata) {
                driversData._metadata = {};
            }
            driversData._metadata.hvciCheck = {
                lastCheck: new Date().toISOString(),
                updatedDrivers: updatedCount,
                hvciBlockedTotal: hvciBlockedCount,
                hvciCompatibleTotal: hvciAllowedCount,
                source: 'Microsoft HVCI Policy'
            };
            
            // Save updated data
            if (updatedCount > 0) {
                console.log(`Updated ${updatedCount} drivers with HVCI tags`);
                fs.writeFileSync(DRV_JSON_PATH, JSON.stringify(driversData, null, 2));
            } else {
                console.log('No new HVCI tags to add');
                // Still update metadata
                fs.writeFileSync(DRV_JSON_PATH, JSON.stringify(driversData, null, 2));
            }
            
            console.log(`HVCI Blocked: ${hvciBlockedCount}, HVCI Compatible: ${hvciAllowedCount}`);
        }
        
        updateDriversJSON().catch(console.error);
        EOF
        
    - name: Execute HVCI tagging script
      run: node hvci-tagger.js
      
    - name: Check for changes
      id: git-check
      run: |
        git diff --exit-code data/drv.json || echo "changed=true" >> $GITHUB_OUTPUT
        
    - name: Commit and push changes
      if: steps.git-check.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/drv.json
        
        git commit -m "Update HVCI tags based on Microsoft HVCI policy
        
        - Updated $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Triggered by: ${{ github.event_name }}
        - Automated check against Microsoft HVCI Block List"
        
        echo "Pushing changes..."
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
